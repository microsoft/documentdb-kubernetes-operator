name: 'Deploy DocumentDB Cluster'
description: 'Deploys a DocumentDB cluster and waits for it to be ready'
inputs:
  architecture:
    description: 'Target architecture for logging purposes'
    required: true
  namespace:
    description: 'Kubernetes namespace for the DocumentDB cluster'
    required: true
  cluster-name:
    description: 'Name of the DocumentDB cluster'
    required: true
  node-count:
    description: 'Number of nodes in the cluster'
    required: false
    default: '1'
  instances-per-node:
    description: 'Number of instances per node'
    required: false
    default: '1'
  documentdb-image:
    description: 'DocumentDB container image to use'
    required: false
    default: 'ghcr.io/microsoft/documentdb/documentdb-local:16'
  pvc-size:
    description: 'Size of persistent volume claim'
    required: false
    default: '5Gi'
  public-load-balancer:
    description: 'Enable public load balancer'
    required: false
    default: 'false'
  timeout:
    description: 'Timeout in seconds for cluster readiness'
    required: false
    default: '600'
runs:
  using: 'composite'
  steps:
    - name: Deploy DocumentDB cluster and wait for readiness
      shell: bash
      run: |
        echo "Deploying DocumentDB cluster on ${{ inputs.architecture }} architecture..."
        
        # Create namespace and DocumentDB resource
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${{ inputs.namespace }}
        ---
        apiVersion: db.microsoft.com/preview
        kind: DocumentDB
        metadata:
          name: ${{ inputs.cluster-name }}
          namespace: ${{ inputs.namespace }}
        spec:
          nodeCount: ${{ inputs.node-count }}
          instancesPerNode: ${{ inputs.instances-per-node }}
          documentDBImage: ${{ inputs.documentdb-image }}
          resource:
            pvcSize: ${{ inputs.pvc-size }}
          exposeViaService:
            serviceType: ClusterIP
        EOF
        
        echo "DocumentDB resource created on ${{ inputs.architecture }}, waiting for cluster to be ready..."
        
        # Initial wait for operator to process the resource
        echo "Allowing time for operator to process the DocumentDB resource..."
        sleep 30
        
        # Enhanced cluster readiness check with timeout
        echo "Starting cluster readiness check with timeout of ${{ inputs.timeout }} seconds..."
        
        timeout ${{ inputs.timeout }} bash -c '
        expected_pods=${{ inputs.node-count }}
        start_time=$(date +%s)
        
        while true; do
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          
          echo "=== Cluster Status Check (${elapsed}s elapsed) ==="
          
          # Check if DocumentDB resource exists and get its status
          echo "DocumentDB resource status:"
          kubectl get documentdb ${{ inputs.cluster-name }} -n ${{ inputs.namespace }} -o yaml 2>/dev/null | grep -A 10 "status:" || echo "No status available yet"
          echo ""
          
          # Check for any pods in the namespace
          echo "Checking for DocumentDB pods..."
          kubectl get pods -n ${{ inputs.namespace }} -o wide || echo "No pods found yet"
          echo ""
          
          # Count pods with the cluster label
          pod_count=$(kubectl get pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} --no-headers 2>/dev/null | wc -l)
          echo "Found $pod_count pods with cluster label cnpg.io/cluster=${{ inputs.cluster-name }}"
          
          if [[ "$pod_count" -eq "0" ]]; then
            echo "No DocumentDB pods found yet, waiting..."
            
            # Check if there are any errors in the operator logs
            echo "Checking operator logs for any issues..."
            kubectl logs -n documentdb-operator deployment/documentdb-operator --tail=10 2>/dev/null | grep -i error || echo "No recent errors found"
            
            sleep 15
            continue
          fi
          
          # Check pod readiness using enhanced criteria
          echo "Checking pod readiness for $pod_count pods..."
          
          # Get detailed pod status
          kubectl describe pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} | grep -E "(Name:|Status:|Ready:|Restart)" || echo "Could not get detailed pod status"
          
          # Count ready pods using comprehensive readiness check
          ready=$(kubectl get pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} -o json 2>/dev/null | \
                  jq ".items[] | select(.status.phase == \"Running\" and ([.status.containerStatuses[] | .ready] | all))" 2>/dev/null | \
                  jq -s "length" 2>/dev/null || echo "0")
          
          echo "Ready pods: $ready/$expected_pods"
          
          # Additional readiness verification
          if [[ "$ready" -eq "$expected_pods" ]]; then
            echo "All pods appear ready, performing additional verification..."
            
            # Verify pods have stable IPs and are truly ready
            stable_count=0
            for pod in $(kubectl get pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} -o jsonpath="{.items[*].metadata.name}" 2>/dev/null); do
              # Check if pod has IP and is ready
              pod_ip=$(kubectl get pod $pod -n ${{ inputs.namespace }} -o jsonpath="{.status.podIP}" 2>/dev/null)
              pod_ready=$(kubectl get pod $pod -n ${{ inputs.namespace }} -o jsonpath="{.status.conditions[?(@.type==\"Ready\")].status}" 2>/dev/null)
              
              if [[ -n "$pod_ip" && "$pod_ready" == "True" ]]; then
                echo "Pod $pod is ready with IP: $pod_ip"
                ((stable_count++))
              else
                echo "Pod $pod is not fully ready (IP: $pod_ip, Ready: $pod_ready)"
              fi
            done
            
            if [[ "$stable_count" -eq "$expected_pods" ]]; then
              echo "✓ DocumentDB cluster is fully ready and stable!"
              echo "=== Final Cluster State ==="
              kubectl get pods -n ${{ inputs.namespace }} -o wide
              kubectl get documentdb ${{ inputs.cluster-name }} -n ${{ inputs.namespace }} -o yaml | grep -A 20 "status:" || echo "No detailed status available"
              break
            else
              echo "Only $stable_count/$expected_pods pods are fully stable, waiting..."
            fi
          else
            echo "Waiting for pods to be ready... ($ready/$expected_pods pods ready)"
            
            # Show pod status for debugging
            kubectl get pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} -o custom-columns="NAME:.metadata.name,STATUS:.status.phase,READY:.status.conditions[?(@.type==\"Ready\")].status,RESTARTS:.status.containerStatuses[0].restartCount" --no-headers 2>/dev/null || echo "Could not get pod status details"
          fi
          
          echo "Waiting 15 seconds before next check..."
          sleep 15
        done
        ' || {
          echo "❌ Timeout waiting for DocumentDB cluster to be ready on ${{ inputs.architecture }}"
          
          echo "=== Final Diagnostic Information ==="
          echo "DocumentDB resource status:"
          kubectl get documentdb ${{ inputs.cluster-name }} -n ${{ inputs.namespace }} -o yaml || echo "Failed to get DocumentDB resource"
          
          echo "Pod status:"
          kubectl get pods -n ${{ inputs.namespace }} -o wide || echo "Failed to get pods"
          
          echo "Pod descriptions:"
          kubectl describe pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} || echo "Failed to describe pods"
          
          echo "Recent events:"
          kubectl get events -n ${{ inputs.namespace }} --sort-by=.lastTimestamp --field-selector involvedObject.kind=Pod | tail -10 || echo "Failed to get events"
          
          echo "Operator logs:"
          kubectl logs -n documentdb-operator deployment/documentdb-operator --tail=50 || echo "Failed to get operator logs"
          
          exit 1
        }
        
        echo "✓ DocumentDB cluster deployment completed successfully on ${{ inputs.architecture }}"
        
        # Final verification and status report
        echo "=== Deployment Summary ==="
        echo "Cluster name: ${{ inputs.cluster-name }}"
        echo "Namespace: ${{ inputs.namespace }}"
        echo "Node count: ${{ inputs.node-count }}"
        echo "Instances per node: ${{ inputs.instances-per-node }}"
        echo "Architecture: ${{ inputs.architecture }}"
        
        echo "Final pod status:"
        kubectl get pods -n ${{ inputs.namespace }} -o wide
