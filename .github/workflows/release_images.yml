name: RELEASE - Promote Candidate Images and Publish Helm Chart

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to release (both operator and sidecar images use the same tag)'
        required: true
        default: 'test'
      target_tag:
        description: 'Target tag to apply (default: preview)'
        required: false
        default: 'preview'
      run_tests:
        description: 'Run tests before releasing'
        required: false
        default: false
        type: boolean
      chart_version:
        description: 'Helm chart version to publish'
        required: false
        default: '0.1.1'

permissions:
  contents: read
  packages: write
  actions: read
  id-token: write

jobs:
  # Optional test jobs - run both E2E and integration tests in parallel if enabled
  # test-e2e:
  #   name: E2E Test Images Before Release
  #   if: ${{ inputs.run_tests == 'true' }}
  #   uses: ./.github/workflows/test-E2E.yml
  #   with:
  #     image_tag: ${{ inputs.image_tag }}
  #   secrets: inherit

  # test-integration:
  #   name: Integration Test Images Before Release
  #   if: ${{ inputs.run_tests == 'true' }}
  #   uses: ./.github/workflows/test-integration.yml
  #   with:
  #     image_tag: ${{ inputs.image_tag }}
  #   secrets: inherit

  copy-and-push-manifest:
    name: Release Images
    runs-on: ubuntu-latest
    #needs: [test-e2e, test-integration]
    #if: ${{ always() && ( inputs.run_tests != 'true' || ((needs.test-e2e.result == 'success' || needs.test-e2e.result == 'skipped') && (needs.test-integration.result == 'success' || needs.test-integration.result == 'skipped')) ) }}
    strategy:
      matrix:
        image: [operator, sidecar]
    steps:
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Retag existing manifest
        env:
          SOURCE_TAG: ${{ github.event.inputs.image_tag }}
          TARGET_TAG: ${{ github.event.inputs.target_tag }}
        run: |
          echo "Releasing ${{ matrix.image }} image from tag $SOURCE_TAG to $TARGET_TAG"
          docker buildx imagetools create \
            -t ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ env.TARGET_TAG }} \
            ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ env.SOURCE_TAG }}

  publish-helm-chart:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: copy-and-push-manifest
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      CHART_NAME: documentdb-chart
      GHCR_REPO: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Set chart version
        run: |
            CHART_VERSION_INPUT="${{ github.event.inputs.chart_version }}"
            if [[ -z "$CHART_VERSION_INPUT" ]]; then
              CHART_VERSION_FROM_FILE=$(awk -F': *' '/^version:/ {print $2; exit}' documentdb-chart/Chart.yaml)
              if [[ -z "$CHART_VERSION_FROM_FILE" ]]; then
                echo "Failed to determine chart version from documentdb-chart/Chart.yaml" >&2
                exit 1
              fi
              CHART_VERSION_INPUT="$CHART_VERSION_FROM_FILE"
            fi
            echo "CHART_VERSION=${CHART_VERSION_INPUT}" >> $GITHUB_ENV
            echo "Using chart version: ${CHART_VERSION_INPUT}"

      - name: Update Chart.yaml metadata
        run: |
          sed -i "s/^version: .*/version: ${CHART_VERSION}/" documentdb-chart/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"${CHART_VERSION}\"/" documentdb-chart/Chart.yaml

      - name: Package Helm chart
        run: |
          helm dependency update documentdb-chart
          helm package $CHART_NAME --version $CHART_VERSION

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Push Helm chart to GHCR
        run: |
          helm push /home/runner/work/documentdb-kubernetes-operator/documentdb-kubernetes-operator/documentdb-operator-${CHART_VERSION}.tgz oci://${GHCR_REPO}

      - name: Helm release summary
        run: |
          echo "## Helm Chart Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Name**: \`$CHART_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Version**: \`$CHART_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: \`${{ github.event.inputs.target_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`$GHCR_REPO\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.target_tag }}" == "preview" ]]; then
            echo "**Note**: Used default preview configuration (values.yaml unchanged)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Note**: Updated values.yaml to use tag \`${{ github.event.inputs.target_tag }}\`" >> $GITHUB_STEP_SUMMARY
          fi

  