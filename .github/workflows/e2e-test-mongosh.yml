name: E2E Test - DocumentDB with mongosh

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      documentdb_version:
        description: 'DocumentDB image version to test'
        required: false
        default: '16'
      node_count:
        description: 'Number of DocumentDB nodes'
        required: false
        default: '1'
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
          - quick
          - integration
          - full

permissions:
  packages: write
  contents: read
  id-token: write
  actions: read
  attestations: write

env:
  CERT_MANAGER_NS: cert-manager
  OPERATOR_NS: documentdb-operator
  DB_NS: documentdb-e2e-test
  DB_NAME: documentdb-e2e
  DB_USERNAME: default_user
  DB_PASSWORD: Admin100
  DB_PORT: 10260

jobs:
  # Use the reusable build workflow
  build:
    name: Build Images and Charts
    uses: ./.github/workflows/build-and-package.yml
    with:
      image_tag_prefix: 'e2e-test'
      chart_version_prefix: '0.1.0'
      push_to_registry: true
    secrets: inherit

  e2e-test:
    name: Run E2E Tests
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    needs: build
    
    strategy:
      matrix:
        include:
          - architecture: amd64
            runner: ubuntu-latest
          # - architecture: arm64
          #   runner: ubuntu-22.04-arm
        # Test different scenarios
        test_scenario:
          - name: "single-node"
            node_count: 1
            instances_per_node: 1
    
    env:
      # Use outputs from the build workflow
      IMAGE_NAME: documentdb-kubernetes-operator
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      CHART_VERSION: ${{ needs.build.outputs.chart_version }}
      ARCHITECTURE: ${{ matrix.architecture }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify built image exists
      run: |
        echo "Verifying that our newly built image exists..."
        echo "Expected image: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        
        # Login to GHCR to check image
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Try to pull the image to verify it exists
        docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        echo "✓ Image verified successfully"

    - name: Setup dependencies
      uses: ./.github/actions/setup-dependencies
      with:
        architecture: ${{ matrix.architecture }}
        python-version: '3.11'
        helm-version: 'latest'

    - name: Setup K8s cluster
      uses: ./.github/actions/setup-k8s-cluster
      with:
        cluster-name: documentdb-e2e-${{ matrix.architecture }}-${{ matrix.test_scenario.name }}
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        chart-version: ${{ env.CHART_VERSION }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        github-actor: ${{ github.actor }}
        github-repository-owner: ${{ github.repository_owner }}
        cert-manager-timeout: '10m'
        operator-timeout: '15m'
        architecture: ${{ matrix.architecture }}

    - name: Deploy DocumentDB Cluster - ${{ matrix.test_scenario.name }}
      uses: ./.github/actions/deploy-documentdb
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        node-count: ${{ matrix.test_scenario.node_count }}
        instances-per-node: ${{ matrix.test_scenario.instances_per_node }}
        documentdb-image: 'ghcr.io/microsoft/documentdb/documentdb-local:${{ github.event.inputs.documentdb_version || 16 }}'
        pvc-size: '10Gi'
        public-load-balancer: 'false'
        timeout: '900'
        architecture: ${{ matrix.architecture }}

    - name: Setup connection for comprehensive tests
      uses: ./.github/actions/connection-test-setup
      id: comprehensive-connection
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        port: ${{ env.DB_PORT }}
        architecture: ${{ matrix.architecture }}
        pid-file: '/tmp/comprehensive_pf_pid'

    - name: Execute comprehensive mongosh tests
      run: |
        echo "Running comprehensive mongosh validation tests on ${{ matrix.architecture }}..."
        echo "Using pod: ${{ steps.comprehensive-connection.outputs.pod-name }}"
        
        # Run comprehensive tests with validation using external script
        if mongosh 127.0.0.1:$DB_PORT \
          -u $DB_USERNAME \
          -p $DB_PASSWORD \
          --authenticationMechanism SCRAM-SHA-256 \
          --tls \
          --tlsAllowInvalidCertificates \
          --file scripts/test-scripts/comprehensive_mongosh_tests.js; then
          echo "✓ Comprehensive mongosh tests completed successfully on ${{ matrix.architecture }}"
        else
          echo "❌ Comprehensive mongosh tests failed on ${{ matrix.architecture }}"
          exit 1
        fi

    - name: Cleanup comprehensive test connection
      if: always()
      uses: ./.github/actions/cleanup-port-forward
      with:
        pid-file: '/tmp/comprehensive_pf_pid'
        architecture: ${{ matrix.architecture }}

    - name: Setup connection for performance tests
      uses: ./.github/actions/connection-test-setup
      id: performance-connection
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        port: ${{ env.DB_PORT }}
        architecture: ${{ matrix.architecture }}
        pid-file: '/tmp/performance_pf_pid'

    - name: Execute performance tests
      run: |
        echo "Running performance validation tests on ${{ matrix.architecture }}..."
        echo "Using pod: ${{ steps.performance-connection.outputs.pod-name }}"
        
        # Run performance tests using external script
        if mongosh 127.0.0.1:$DB_PORT \
          -u $DB_USERNAME \
          -p $DB_PASSWORD \
          --authenticationMechanism SCRAM-SHA-256 \
          --tls \
          --tlsAllowInvalidCertificates \
          --file scripts/test-scripts/performance_test.js; then
          echo "✓ Performance tests completed successfully on ${{ matrix.architecture }}"
        else
          echo "❌ Performance tests failed on ${{ matrix.architecture }}"
          exit 1
        fi

    - name: Cleanup performance test connection
      if: always()
      uses: ./.github/actions/cleanup-port-forward
      with:
        pid-file: '/tmp/performance_pf_pid'
        architecture: ${{ matrix.architecture }}

    - name: Test cluster health and monitoring
      run: |
        echo "Testing cluster health and monitoring on ${{ matrix.architecture }}..."
        
        # Check DocumentDB resource status
        kubectl get documentdb $DB_NAME -n $DB_NS -o yaml
        
        # Check pod resources and health
        kubectl top pods -n $DB_NS --containers || echo "Metrics server not available"
        
        # Check logs for any errors
        kubectl logs -n $DB_NS -l cnpg.io/cluster=$DB_NAME --tail=50
        
        # Check events
        kubectl get events -n $DB_NS --sort-by='.lastTimestamp'

    - name: Collect comprehensive logs on failure
      if: failure()
      run: |
        echo "=== Comprehensive Failure Diagnostics for ${{ matrix.architecture }} ==="
        
        # Check if kubectl is working
        if ! kubectl version --client &>/dev/null; then
          echo "kubectl not available"
          exit 0
        fi
        
        # Check if cluster is accessible
        if ! kubectl cluster-info &>/dev/null; then
          echo "Cluster not accessible"
          kubectl config current-context || echo "No kubectl context found"
          kubectl config get-contexts || echo "No contexts available"
          exit 0
        fi
        
        echo "=== System Information ==="
        kubectl version --client || echo "Failed to get kubectl version"
        helm version || echo "Failed to get helm version"
        docker --version || echo "Failed to get docker version"
        
        echo "=== Cluster State ==="
        kubectl get nodes -o wide || echo "Failed to get nodes"
        kubectl get pods --all-namespaces -o wide || echo "Failed to get pods"
        
        echo "=== DocumentDB Resources ==="
        kubectl get documentdb -A -o yaml || echo "Failed to get DocumentDB resources"
        kubectl describe documentdb $DB_NAME -n $DB_NS || echo "Failed to describe DocumentDB"
        
        echo "=== Storage Information ==="
        kubectl get pv,pvc -A || echo "Failed to get storage info"
        
        echo "=== Pod Details ==="
        kubectl describe pods -n $DB_NS || echo "Failed to describe pods"
        
        echo "=== Container Logs ==="
        for pod in $(kubectl get pods -n $DB_NS -o name 2>/dev/null); do
          echo "--- Logs for $pod ---"
          kubectl logs $pod -n $DB_NS --all-containers=true --tail=100 || echo "Failed to get logs for $pod"
        done
        
        echo "=== Operator Logs ==="
        kubectl logs -n $OPERATOR_NS deployment/documentdb-operator --tail=200 || echo "Failed to get operator logs"
        
        echo "=== CNPG Operator Logs ==="
        kubectl logs -n cnpg-system --all-containers=true --tail=100 || echo "CNPG logs not available"
        
        echo "=== Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' || echo "Failed to get events"
