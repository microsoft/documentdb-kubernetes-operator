name: 'Setup Kubernetes Cluster'
description: 'Sets up a Kubernetes cluster with cert-manager and DocumentDB operator'
inputs:
  architecture:
    description: 'Target architecture for logging purposes'
    required: true
  cert-manager-namespace:
    description: 'Namespace for cert-manager'
    required: true
  operator-namespace:
    description: 'Namespace for DocumentDB operator'
    required: true
  chart-version:
    description: 'Version of the DocumentDB operator chart to install'
    required: true
  github-token:
    description: 'GitHub token for accessing packages'
    required: true
  repository-owner:
    description: 'GitHub repository owner'
    required: true
  use-local-chart:
    description: 'Whether to use local chart instead of registry'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - name: Setup Kubernetes cluster with dependencies
      shell: bash
      run: |
        echo "Setting up cluster on ${{ inputs.architecture }} architecture..."
        
        # Wait for cluster nodes to be ready
        kubectl wait --for=condition=Ready nodes --all --timeout=300s
        
        # Verify node architecture and cluster state
        kubectl get nodes -o wide
        echo "Node architecture verification:"
        kubectl get nodes -o jsonpath='{.items[*].status.nodeInfo.architecture}'
        echo ""
        
        # Add Helm repositories and update
        echo "Adding Helm repositories..."
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        
        # Install cert-manager
        echo "Installing cert-manager..."
        helm install cert-manager jetstack/cert-manager \
          --namespace ${{ inputs.cert-manager-namespace }} \
          --create-namespace \
          --set installCRDs=true \
          --wait \
          --timeout=5m
        
        # Verify cert-manager installation
        echo "Verifying cert-manager installation..."
        kubectl wait --for=condition=Available deployment/cert-manager -n ${{ inputs.cert-manager-namespace }} --timeout=300s
        kubectl wait --for=condition=Available deployment/cert-manager-cainjector -n ${{ inputs.cert-manager-namespace }} --timeout=300s
        kubectl wait --for=condition=Available deployment/cert-manager-webhook -n ${{ inputs.cert-manager-namespace }} --timeout=300s
        
        # Install the DocumentDB operator
        echo "Installing DocumentDB operator with chart version: ${{ inputs.chart-version }}"
        
        if [[ "${{ inputs.use-local-chart }}" == "true" ]]; then
          echo "Installing from local Helm chart..."
          
          # Extract and prepare local chart - artifacts are in the workspace root
          if [ -f ./artifacts/build-helm-chart/documentdb-operator-${{ inputs.chart-version }}.tgz ]; then
            tar -xzf ./artifacts/build-helm-chart/documentdb-operator-${{ inputs.chart-version }}.tgz
            
            # Install the operator using the local chart
            helm install documentdb-operator ./documentdb-operator \
              --namespace ${{ inputs.operator-namespace }} \
              --create-namespace \
              --wait \
              --timeout=8m
          else
            echo "❌ Local Helm chart artifact not found"
            ls -la ./artifacts/build-helm-chart/ || echo "Artifact directory not found"
            ls -la ./artifacts/ || echo "No artifacts directory found"
            exit 1
          fi
        else
          echo "Installing from registry..."
          
          # Login to GHCR for Helm
          echo "Logging in to GitHub Container Registry..."
          echo "${{ inputs.github-token }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin
          
          # Install the operator using the registry chart
          helm install documentdb-operator oci://ghcr.io/${{ inputs.repository-owner }}/documentdb-operator \
            --version ${{ inputs.chart-version }} \
            --namespace ${{ inputs.operator-namespace }} \
            --create-namespace \
            --wait \
            --timeout=8m
        fi
        
        # Verify operator installation
        echo "Verifying DocumentDB operator installation..."
        kubectl wait --for=condition=Available deployment/documentdb-operator -n ${{ inputs.operator-namespace }} --timeout=300s
        
        # Additional verification - check that operator is actually running
        echo "Checking operator pod status..."
        kubectl get pods -n ${{ inputs.operator-namespace }} -l app.kubernetes.io/name=documentdb-operator
        
        # Verify operator logs for any immediate issues
        echo "Checking operator logs for any startup issues..."
        kubectl logs -n ${{ inputs.operator-namespace }} deployment/documentdb-operator --tail=20 || echo "Could not retrieve operator logs"
        
        # Check for CRDs installation
        echo "Verifying DocumentDB CRDs are installed..."
        kubectl get crd documentdbs.db.microsoft.com || echo "DocumentDB CRD not found"
        
        echo "✓ Cluster setup completed on ${{ inputs.architecture }}"
        
        # Final cluster state summary
        echo "=== Final cluster state summary ==="
        echo "Nodes:"
        kubectl get nodes
        echo ""
        echo "cert-manager pods:"
        kubectl get pods -n ${{ inputs.cert-manager-namespace }}
        echo ""
        echo "DocumentDB operator pods:"
        kubectl get pods -n ${{ inputs.operator-namespace }}
        echo ""
        echo "Available CRDs:"
        kubectl get crd | grep -E "(documentdb|cert-manager)" || echo "No relevant CRDs found"
