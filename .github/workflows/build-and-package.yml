name: Build and Package

on:
  workflow_call:
    inputs:
      image_tag_prefix:
        description: 'Prefix for image tag'
        required: false
        default: 'build'
        type: string
      chart_version_prefix:
        description: 'Prefix for chart version'
        required: false
        default: '0.1.0'
        type: string
      push_to_registry:
        description: 'Whether to push to registry'
        required: false
        default: true
        type: boolean
    outputs:
      image_tag:
        description: 'Built image tag'
        value: ${{ inputs.push_to_registry && jobs.create-manifest.outputs.image_tag || jobs.build-for-artifacts.outputs.image_tag }}
      chart_version:
        description: 'Built chart version'
        value: ${{ inputs.push_to_registry && jobs.create-helm-chart.outputs.chart_version || jobs.create-helm-chart-artifact.outputs.chart_version }}
      image_digest:
        description: 'Image manifest digest'
        value: ${{ jobs.create-manifest.outputs.manifest_digest }}

permissions:
  packages: write
  contents: read
  id-token: write

env:
  IMAGE_NAME: documentdb-kubernetes-operator
  IMAGE_TAG: ${{ inputs.image_tag_prefix }}-${{ github.run_id }}
  CHART_NAME: documentdb-chart
  CHART_VERSION: ${{ inputs.chart_version_prefix }}-${{ github.run_id }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    timeout-minutes: 30
    if: ${{ inputs.push_to_registry }}
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            base_arch: AMD64
            runner: ubuntu-22.04
          - arch: arm64
            base_arch: ARM64
            runner: ubuntu-22.04-arm
    runs-on: ${{ matrix.runner }}
    outputs:
      image-digest-amd64: ${{ steps.build-amd64.outputs.digest }}
      image-digest-arm64: ${{ steps.build-arm64.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to GHCR
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Build and Push AMD64 Image
      if: matrix.arch == 'amd64'
      id: build-amd64
      run: |
        TAG=${{ env.IMAGE_TAG }}-amd64
        docker build \
          --build-arg ARCH=AMD64 \
          -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG \
          -f Dockerfile .
        docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG

        # Get digest for attestation
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG | cut -d'@' -f2)
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT

    - name: Build and Push ARM64 Image
      if: matrix.arch == 'arm64'
      id: build-arm64
      run: |
        TAG=${{ env.IMAGE_TAG }}-arm64
        docker build \
          --build-arg ARCH=ARM64 \
          -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG \
          -f Dockerfile .
        docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG
        
        # Get digest for attestation
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$TAG | cut -d'@' -f2)
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT

  create-manifest:
    name: Create Docker Manifest
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: build-and-push
    if: ${{ inputs.push_to_registry }}
    outputs:
      manifest_digest: ${{ steps.manifest.outputs.digest }}
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
    - name: Login to GHCR
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Create and Push Manifest
      id: manifest
      run: |
        echo "Creating multi-architecture manifest for amd64 and arm64..."
        docker manifest create ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-amd64 \
          --amend ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-arm64

        echo "Pushing multi-architecture manifest..."
        docker manifest push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        
        # Get manifest digest
        DIGEST=$(docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} | awk '/^Digest:/ { print $2 }')
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT
        
        # Verify multi-arch manifest
        echo "Verifying multi-architecture manifest:"
        docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        echo "✓ Multi-arch manifest created and pushed successfully"

  create-helm-chart:
    name: Create and Push Helm Chart
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-manifest]
    if: ${{ inputs.push_to_registry && !failure() && !cancelled() }}
    outputs:
      chart_version: ${{ env.CHART_VERSION }}
      chart_digest: ${{ steps.push-chart.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Update Helm chart with new image
      run: |
        # Update the operator image tag and repository in values.yaml
        sed -i '/documentdbk8soperator:/,/tag:/ s|tag:.*|tag: \"${{ env.IMAGE_TAG }}\"|' documentdb-chart/values.yaml
        sed -i '/documentdbk8soperator:/,/repository:/ s|repository:.*|repository: \"ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}\"|' documentdb-chart/values.yaml
        
        # Update Chart.yaml version to use proper semantic versioning
        sed -i "s|^version:.*|version: ${{ env.CHART_VERSION }}|g" documentdb-chart/Chart.yaml
        
        echo "Updated Chart.yaml:"
        cat documentdb-chart/Chart.yaml
        
        echo "Updated values.yaml (with multi-arch image reference):"
        cat documentdb-chart/values.yaml

    - name: Package Helm chart
      run: |
        # Clean up any existing Chart.lock files
        rm -f ${{ env.CHART_NAME }}/Chart.lock
        
        echo "Running helm dependency update for ${{ env.CHART_NAME }}..."
        helm dependency update ${{ env.CHART_NAME }}
        
        echo "Validating chart..."
        helm lint ${{ env.CHART_NAME }}
        
        echo "Packaging chart with version ${{ env.CHART_VERSION }}..."
        helm package ${{ env.CHART_NAME }} --version ${{ env.CHART_VERSION }}
        
        echo "Generated chart package:"
        ls -la *.tgz

    - name: Log in to GHCR
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin

    - name: Push Helm chart to GHCR
      id: push-chart
      run: |
        # Push to the repository root, not with an additional path segment
        # The package name should match the chart name from Chart.yaml
        CHART_PACKAGE="documentdb-operator-${{ env.CHART_VERSION }}.tgz"
        echo "Pushing chart package: $CHART_PACKAGE"
        OUTPUT=$(helm push $CHART_PACKAGE oci://ghcr.io/${{ github.repository_owner }})
        echo "chart-push-output=$OUTPUT" >> $GITHUB_OUTPUT
        echo "✓ Chart pushed successfully with multi-architecture image support"

  build-for-artifacts:
    name: Build Docker Image for Artifact
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ !inputs.push_to_registry }}
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "Building Docker image for artifact (no registry push)..."
        docker buildx build \
          --platform linux/amd64 \
          --tag ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --load \
          .
        
        echo "✓ Docker image built successfully"

    - name: Save Docker image as artifact
      run: |
        echo "Saving Docker image as tar file..."
        docker save ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} > documentdb-operator-image.tar
        echo "✓ Docker image saved to tar file"

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-docker-image
        path: documentdb-operator-image.tar
        retention-days: 1

  create-helm-chart-artifact:
    name: Create Helm Chart Artifact
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-for-artifacts]
    if: ${{ !inputs.push_to_registry }}
    outputs:
      chart_version: ${{ env.CHART_VERSION }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Update Helm chart with local image reference
      run: |
        # Update the operator image tag and repository in values.yaml to use our locally built image
        sed -i '/documentdbk8soperator:/,/tag:/ s|tag:.*|tag: \"${{ env.IMAGE_TAG }}\"|' documentdb-chart/values.yaml
        sed -i '/documentdbk8soperator:/,/repository:/ s|repository:.*|repository: \"ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}\"|' documentdb-chart/values.yaml
        
        # Update Chart.yaml version
        sed -i "s|^version:.*|version: ${{ env.CHART_VERSION }}|g" documentdb-chart/Chart.yaml
        
        echo "Updated Chart.yaml:"
        cat documentdb-chart/Chart.yaml
        
        echo "Updated values.yaml (with local image reference):"
        cat documentdb-chart/values.yaml

    - name: Package Helm chart
      run: |
        # Clean up any existing Chart.lock files
        rm -f ${{ env.CHART_NAME }}/Chart.lock
        
        echo "Running helm dependency update for ${{ env.CHART_NAME }}..."
        helm dependency update ${{ env.CHART_NAME }}
        
        echo "Validating chart..."
        helm lint ${{ env.CHART_NAME }}
        
        echo "Packaging chart with version ${{ env.CHART_VERSION }}..."
        helm package ${{ env.CHART_NAME }} --version ${{ env.CHART_VERSION }}
        
        echo "Generated chart package:"
        ls -la *.tgz

    - name: Upload Helm chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-helm-chart
        path: "*.tgz"
        retention-days: 1

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build-and-push, create-manifest, create-helm-chart, build-for-artifacts, create-helm-chart-artifact]
    steps:
    - name: Generate Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag Prefix**: ${{ inputs.image_tag_prefix }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Version Prefix**: ${{ inputs.chart_version_prefix }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Push to Registry**: ${{ inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.push_to_registry }}" == "true" ]]; then
          echo "### Built Artifacts (Registry):" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-Arch Docker Image**: \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\` (amd64 + arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64 Image**: \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64 Image**: \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Helm Chart**: \`oci://ghcr.io/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ env.CHART_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Manifest Digest**: \`${{ needs.create-manifest.outputs.manifest_digest }}\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Manifest**: ${{ needs.create-manifest.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Chart**: ${{ needs.create-helm-chart.result }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Built Artifacts (Local/Artifacts):" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\` (saved as artifact)" >> $GITHUB_STEP_SUMMARY
          echo "- **Helm Chart**: \`${{ env.CHART_VERSION }}\` (saved as artifact)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Artifacts**: ${{ needs.build-for-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Artifacts**: ${{ needs.create-helm-chart-artifact.result }}" >> $GITHUB_STEP_SUMMARY
        fi

        