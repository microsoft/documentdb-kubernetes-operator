apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: accounts-namespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-accounts
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "nodes/metrics", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-accounts
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector-accounts
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: accounts-namespace
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: documentdb-accounts-collector
  namespace: accounts-namespace
spec:
  mode: deployment  # Single pod per namespace, not DaemonSet
  replicas: 1
  serviceAccount: otel-collector
  config:
    receivers:
      # Scrape container CPU/Memory metrics from DocumentDB pods
      prometheus:
        config:
          scrape_configs:
            # Container CPU/Memory metrics via Kubernetes API proxy to cAdvisor
            - job_name: 'accounts-container-metrics'
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                # Use Kubernetes API proxy to access cAdvisor
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: '/api/v1/nodes/$1/proxy/metrics/cadvisor'
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance
                - target_label: tenant
                  replacement: 'accounts'
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              metric_relabel_configs:
                # Filter only accounts namespace containers after scraping
                - source_labels: [namespace]
                  regex: 'accounts-namespace'
                  action: keep
                # Keep only running containers (exclude POD sandbox)
                - source_labels: [container]
                  regex: '^$|POD'
                  action: drop

    processors:
      batch:
        timeout: 10s
        send_batch_size: 1024

      attributes:
        actions:
          - key: service.name
            value: "documentdb-accounts-telemetry"
            action: insert
          - key: telemetry.source
            value: "otel-collector-accounts"
            action: insert
          - key: tenant
            value: "accounts"
            action: insert

    exporters:
      # Export to accounts team's dedicated Prometheus
      prometheusremotewrite:
        endpoint: "http://prometheus-accounts-server.accounts-namespace.svc.cluster.local:80/api/v1/write"
        external_labels:
          tenant: "accounts"
          cluster: "documentdb-accounts"

      # Alternative: Export to tenant-specific external backend
      # azuremonitor:
      #   instrumentation_key: "${ACCOUNTS_AZURE_MONITOR_KEY}"

    service:
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [attributes, batch]
          exporters: [prometheusremotewrite]

      telemetry:
        logs:
          level: "info"