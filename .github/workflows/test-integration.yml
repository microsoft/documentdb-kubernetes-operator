name: "[TEST] Integration - DocumentDB with python"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  packages: write
  contents: read
  id-token: write

env:
  # Cluster configuration
  CERT_MANAGER_NS: cert-manager
  OPERATOR_NS: documentdb-operator
  DB_NS: documentdb-preview-ns
  DB_NAME: documentdb-preview
  # Connection parameters
  DB_USERNAME: default_user
  DB_PASSWORD: Admin100
  DB_PORT: 10260

jobs:
  # Use the reusable build workflow
  build:
    name: Build Images and Charts
    uses: ./.github/workflows/test-build-and-package.yml
    with:
      image_tag_prefix: 'integration-test'
      chart_version_prefix: '0.1.0'
    secrets: inherit

  integration-test:
    name: Run Integration Tests
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    needs: build
    
    strategy:
      matrix:
        include:
          - architecture: amd64
            runner: ubuntu-22.04
            test_scenario_name: "single-node"
            node_count: 1
            instances_per_node: 1
          - architecture: arm64
            runner: ubuntu-22.04-arm
            test_scenario_name: "single-node"
            node_count: 1
            instances_per_node: 1
    
    env:
      # Use outputs from the build workflow with base image tag (architecture will be added by the action)
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      CHART_VERSION: ${{ needs.build.outputs.chart_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: 'build-*'
        path: ./artifacts

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup test environment
      uses: ./.github/actions/setup-test-environment
      with:
        test-type: 'integration'
        architecture: ${{ matrix.architecture }}
        runner: ${{ matrix.runner }}
        test-scenario-name: ${{ matrix.test_scenario_name }}
        node-count: '${{ matrix.node_count }}'
        instances-per-node: '${{ matrix.instances_per_node }}'
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        db-namespace: ${{ env.DB_NS }}
        db-cluster-name: ${{ env.DB_NAME }}
        db-username: ${{ env.DB_USERNAME }}
        db-password: ${{ env.DB_PASSWORD }}
        db-port: ${{ env.DB_PORT }}
        image-tag: ${{ env.IMAGE_TAG }}
        chart-version: ${{ env.CHART_VERSION }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository-owner: ${{ github.repository_owner }}

    - name: Test connection with mongosh
      run: |
        echo "Testing connection with mongosh on ${{ matrix.architecture }} architecture..."
        chmod +x scripts/test-scripts/test-mongodb-connection.sh
        ./scripts/test-scripts/test-mongodb-connection.sh \
          --architecture "${{ matrix.architecture }}" \
          --namespace "${{ env.DB_NS }}" \
          --cluster-name "${{ env.DB_NAME }}" \
          --pod-name "${{ env.DB_NAME }}-1" \
          --port "${{ env.DB_PORT }}" \
          --username "${{ env.DB_USERNAME }}" \
          --password "${{ env.DB_PASSWORD }}" \
          --test-type 'basic'

    - name: Test with Python PyMongo client
      run: |
        echo "Testing with Python PyMongo client on ${{ matrix.architecture }} architecture..."
        chmod +x scripts/test-scripts/test-python-pymongo.sh
        ./scripts/test-scripts/test-python-pymongo.sh \
          --architecture "${{ matrix.architecture }}" \
          --namespace "${{ env.DB_NS }}" \
          --cluster-name "${{ env.DB_NAME }}" \
          --pod-name "${{ env.DB_NAME }}-1" \
          --port "${{ env.DB_PORT }}" \
          --username "${{ env.DB_USERNAME }}" \
          --password "${{ env.DB_PASSWORD }}"

    - name: Collect logs on failure
      if: failure()
      uses: ./.github/actions/collect-logs
      with:
        architecture: ${{ matrix.architecture }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        db-namespace: ${{ env.DB_NS }}
        db-cluster-name: ${{ env.DB_NAME }}
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
