name: 'Collect Comprehensive Logs'
description: 'Collects comprehensive diagnostic logs on failure for troubleshooting'
inputs:
  architecture:
    description: 'Target architecture for logging purposes'
    required: true
  operator-namespace:
    description: 'Namespace where the DocumentDB operator is running'
    required: true
  db-namespace:
    description: 'Namespace where the DocumentDB cluster is running'
    required: true
  db-name:
    description: 'Name of the DocumentDB cluster'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Collect comprehensive failure diagnostics
      shell: bash
      run: |
        echo "=== Comprehensive Failure Diagnostics for ${{ inputs.architecture }} ==="
        
        # Check if kubectl is working
        if ! kubectl version --client &>/dev/null; then
          echo "kubectl not available"
          exit 0
        fi
        
        # Check if cluster is accessible
        if ! kubectl cluster-info &>/dev/null; then
          echo "Cluster not accessible"
          kubectl config current-context || echo "No kubectl context found"
          kubectl config get-contexts || echo "No contexts available"
          exit 0
        fi
        
        echo "=== System Information ==="
        kubectl version --client || echo "Failed to get kubectl version"
        helm version || echo "Failed to get helm version"
        docker --version || echo "Failed to get docker version"
        
        echo "=== Cluster State ==="
        kubectl get nodes -o wide || echo "Failed to get nodes"
        kubectl get pods --all-namespaces -o wide || echo "Failed to get pods"
        
        echo "=== DocumentDB Resources ==="
        kubectl get documentdb -A -o yaml || echo "Failed to get DocumentDB resources"
        kubectl describe documentdb ${{ inputs.db-name }} -n ${{ inputs.db-namespace }} || echo "Failed to describe DocumentDB"
        
        echo "=== Storage Information ==="
        kubectl get pv,pvc -A || echo "Failed to get storage info"
        
        echo "=== Pod Details ==="
        kubectl describe pods -n ${{ inputs.db-namespace }} || echo "Failed to describe pods"
        
        echo "=== Container Logs ==="
        for pod in $(kubectl get pods -n ${{ inputs.db-namespace }} -o name 2>/dev/null); do
          echo "--- Logs for $pod ---"
          kubectl logs $pod -n ${{ inputs.db-namespace }} --all-containers=true --tail=100 || echo "Failed to get logs for $pod"
        done
        
        echo "=== Operator Logs ==="
        kubectl logs -n ${{ inputs.operator-namespace }} deployment/documentdb-operator --tail=200 || echo "Failed to get operator logs"
        
        echo "=== CNPG Operator Logs ==="
        kubectl logs -n cnpg-system --all-containers=true --tail=100 || echo "CNPG logs not available"
        
        echo "=== Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' || echo "Failed to get events"
        
        echo "=== Additional Diagnostics ==="
        echo "--- Namespace Events ---"
        kubectl get events -n ${{ inputs.db-namespace }} --sort-by='.lastTimestamp' || echo "Failed to get namespace events"
        
        echo "--- Operator Namespace Events ---"
        kubectl get events -n ${{ inputs.operator-namespace }} --sort-by='.lastTimestamp' || echo "Failed to get operator namespace events"
        
        echo "--- Resource Quotas ---"
        kubectl get resourcequotas -A || echo "No resource quotas found"
        
        echo "--- Limit Ranges ---"
        kubectl get limitranges -A || echo "No limit ranges found"
        
        echo "--- Service Information ---"
        kubectl get services -n ${{ inputs.db-namespace }} -o wide || echo "Failed to get services"
        
        echo "--- Endpoints Information ---"
        kubectl get endpoints -n ${{ inputs.db-namespace }} || echo "Failed to get endpoints"
        
        echo "--- NetworkPolicies ---"
        kubectl get networkpolicies -A || echo "No network policies found"
        
        echo "=== System Resources ==="
        echo "--- Node Resources ---"
        kubectl describe nodes || echo "Failed to describe nodes"
        
        echo "--- Top Nodes ---"
        kubectl top nodes || echo "Metrics server not available for nodes"
        
        echo "--- Top Pods (All Namespaces) ---"
        kubectl top pods --all-namespaces || echo "Metrics server not available for pods"
