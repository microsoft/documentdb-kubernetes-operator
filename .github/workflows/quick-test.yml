name: Quick Test - DocumentDB Operator

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - connection-only
        - mongosh-only
      timeout_minutes:
        description: 'Test timeout in minutes'
        required: false
        default: '20'

permissions:
  packages: write
  contents: read
  id-token: write

env:
  CERT_MANAGER_NS: cert-manager
  OPERATOR_NS: documentdb-operator
  DB_NS: documentdb-quick-test
  DB_NAME: documentdb-quick
  DB_USERNAME: default_user
  DB_PASSWORD: Admin100
  DB_PORT: 10260

jobs:
  # Use the reusable build workflow
  build:
    name: Build Images and Charts
    uses: ./.github/workflows/build-and-package.yml
    with:
      image_tag_prefix: 'quick-test'
      chart_version_prefix: '0.1.0'
      push_to_registry: true
    secrets: inherit

  quick-test:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout_minutes || '20') }}
    needs: build
    
    env:
      # Use outputs from the build workflow
      IMAGE_NAME: documentdb-kubernetes-operator
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      CHART_VERSION: ${{ needs.build.outputs.chart_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup dependencies
      uses: ./.github/actions/setup-dependencies
      with:
        include-python: 'false'

    - name: Setup K8s cluster
      uses: ./.github/actions/setup-k8s-cluster
      with:
        cluster-name: documentdb-quick-test
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        chart-version: ${{ env.CHART_VERSION }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        github-actor: ${{ github.actor }}
        github-repository-owner: ${{ github.repository_owner }}
        cert-manager-timeout: '5m'
        operator-timeout: '8m'

    - name: Deploy DocumentDB cluster
      uses: ./.github/actions/deploy-documentdb
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        node-count: '1'
        instances-per-node: '1'
        documentdb-image: 'ghcr.io/microsoft/documentdb/documentdb-local:16'
        pvc-size: '5Gi'
        public-load-balancer: 'false'
        timeout: '600'

    - name: Debug cluster status
      run: |
        echo "=== Debug Information ==="
        echo "DocumentDB resource status:"
        kubectl get documentdb -n $DB_NS -o yaml
        
        echo -e "\nAll pods in namespace:"
        kubectl get pods -n $DB_NS -o wide
        
        echo -e "\nPods with cnpg.io/cluster label:"
        kubectl get pods -n $DB_NS -l cnpg.io/cluster=$DB_NAME -o wide
        
        echo -e "\nNamespace events:"
        kubectl get events -n $DB_NS --sort-by='.lastTimestamp' | tail -20

    - name: Setup connection for basic test
      if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'connection-only'
      uses: ./.github/actions/connection-test-setup
      id: basic-connection
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        port: ${{ env.DB_PORT }}
        pid-file: '/tmp/basic_pf_pid'

    - name: Basic connection test
      if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'connection-only'
      run: |
        echo "Running basic connection test..."
        echo "Using pod: ${{ steps.basic-connection.outputs.pod-name }}"
        
        cat > simple_connection_test.js << 'EOF'
        print('Connection successful!');
        
        db = db.getSiblingDB('quicktest');
        
        var result = db.test.insertOne({test: 'hello', timestamp: new Date()});
        print('Insert successful! Document ID:', result.insertedId);
        
        var count = db.test.countDocuments();
        print('Document count:', count);
        
        print('✅ Basic connection test completed successfully!');
        EOF
        
        mongosh 127.0.0.1:$DB_PORT \
          -u $DB_USERNAME -p $DB_PASSWORD \
          --authenticationMechanism SCRAM-SHA-256 \
          --tls --tlsAllowInvalidCertificates \
          --file simple_connection_test.js
        
        echo "✅ Basic connection test passed!"

    - name: Cleanup basic connection
      if: always() && (github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'connection-only')
      uses: ./.github/actions/cleanup-port-forward
      with:
        pid-file: '/tmp/basic_pf_pid'

    - name: Setup connection for mongosh test
      if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'mongosh-only'
      uses: ./.github/actions/connection-test-setup
      id: mongosh-connection
      with:
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        port: ${{ env.DB_PORT }}
        pid-file: '/tmp/mongosh_pf_pid'

    - name: MongoDB shell operations test
      if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'mongosh-only'
      run: |
        echo "Running MongoDB shell operations test..."
        echo "Using pod: ${{ steps.mongosh-connection.outputs.pod-name }}"
        
        cat > quick_mongosh_test.js << 'EOF'
        print("=== Quick mongosh Test ===");
        
        db = db.getSiblingDB('quicktest');
        
        db.createCollection("quicktest");
        
        var docs = [
          { name: "Test1", value: 100, type: "A" },
          { name: "Test2", value: 200, type: "B" },
          { name: "Test3", value: 150, type: "A" }
        ];
        
        var result = db.quicktest.insertMany(docs);
        print("✅ Inserted", result.insertedIds.length, "documents");
        
        var typeADocs = db.quicktest.find({ type: "A" }).toArray();
        print("✅ Found", typeADocs.length, "type A documents");
        
        var avgValue = db.quicktest.aggregate([
          { $group: { _id: null, avgValue: { $avg: "$value" } } }
        ]).toArray();
        print("✅ Average value:", avgValue[0].avgValue);
        
        var updateResult = db.quicktest.updateOne({ name: "Test1" }, { $set: { updated: true } });
        print("✅ Update operation completed, modified count:", updateResult.modifiedCount);

        var updatedDoc = db.quicktest.findOne({ name: "Test1" });
        print("✅ Updated document:", updatedDoc.name, "- updated:", updatedDoc.updated);
        
        print("=== All quick tests passed! ===");
        EOF
        
        mongosh 127.0.0.1:$DB_PORT \
          -u $DB_USERNAME -p $DB_PASSWORD \
          --authenticationMechanism SCRAM-SHA-256 \
          --tls --tlsAllowInvalidCertificates \
          --file quick_mongosh_test.js
        
        echo "✅ mongosh operations test passed!"

    - name: Cleanup mongosh connection
      if: always() && (github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'mongosh-only')
      uses: ./.github/actions/cleanup-port-forward
      with:
        pid-file: '/tmp/mongosh_pf_pid'

    - name: Show cluster status
      if: always()
      run: |
        echo "=== Final cluster status ==="
        kubectl get pods -n $DB_NS -o wide
        kubectl get documentdb -n $DB_NS
        echo "✅ Quick test completed!"
