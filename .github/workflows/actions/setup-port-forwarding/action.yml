name: 'Setup Port Forwarding'
description: 'Sets up robust port forwarding with retry logic for DocumentDB testing'
inputs:
  namespace:
    description: 'Kubernetes namespace where the DocumentDB cluster is running'
    required: true
  cluster-name:
    description: 'Name of the DocumentDB cluster'
    required: true
  port:
    description: 'Port to forward'
    required: true
  architecture:
    description: 'Target architecture for logging purposes'
    required: true
  test-type:
    description: 'Type of test (comprehensive or performance)'
    required: false
    default: 'comprehensive'
runs:
  using: 'composite'
  steps:
    - name: Setup port forwarding with enhanced retries
      shell: bash
      run: |
        echo "Setting up port forwarding for ${{ inputs.test-type }} tests on ${{ inputs.architecture }}..."
        
        # Function to setup port forwarding with enhanced retries
        setup_port_forward() {
          local max_attempts=5
          local attempt=1
          local base_sleep=5
          local test_type="${{ inputs.test-type }}"
          
          # Adjust retry parameters based on test type
          if [[ "$test_type" == "performance" ]]; then
            max_attempts=4
            base_sleep=3
          fi
          
          while [ $attempt -le $max_attempts ]; do
            echo "Port forwarding attempt $attempt/$max_attempts..."
            
            # Exponential/Progressive backoff for retry delays
            local retry_delay=$((base_sleep * attempt))
            if [ $attempt -gt 1 ]; then
              echo "Waiting ${retry_delay}s before retry attempt..."
              sleep $retry_delay
            fi
            
            # Get the actual pod name and ensure it's ready
            POD_NAME=$(kubectl get pods -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} -o jsonpath='{.items[0].metadata.name}')
            if [ -z "$POD_NAME" ]; then
              echo "❌ No DocumentDB pod found"
              kubectl get pods -n ${{ inputs.namespace }}
              ((attempt++))
              continue
            fi
            echo "Using pod: $POD_NAME"
            
            # Comprehensive pod readiness check with retries
            pod_ready=false
            local readiness_checks=3
            if [[ "$test_type" == "performance" ]]; then
              readiness_checks=2
            fi
            
            for ready_check in $(seq 1 $readiness_checks); do
              pod_phase=$(kubectl get pod $POD_NAME -n ${{ inputs.namespace }} -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")
              echo "Pod phase: $pod_phase (readiness check $ready_check/$readiness_checks)"
              
              if [[ "$pod_phase" == "Running" ]]; then
                # Wait for pod to be ready
                local timeout=60
                if [[ "$test_type" == "performance" ]]; then
                  timeout=45
                fi
                
                if kubectl wait --for=condition=Ready pod/$POD_NAME -n ${{ inputs.namespace }} --timeout=${timeout}s 2>/dev/null; then
                  echo "✓ Pod is ready"
                  pod_ready=true
                  break
                else
                  echo "❌ Pod readiness check failed, retrying..."
                  sleep 10
                fi
              else
                echo "Pod is not running, waiting..."
                local timeout=90
                if [[ "$test_type" == "performance" ]]; then
                  timeout=45
                fi
                
                if kubectl wait --for=condition=Ready pod/$POD_NAME -n ${{ inputs.namespace }} --timeout=${timeout}s 2>/dev/null; then
                  echo "✓ Pod became ready"
                  pod_ready=true
                  break
                else
                  echo "❌ Pod failed to become ready, retrying..."
                  local sleep_time=15
                  if [[ "$test_type" == "performance" ]]; then
                    sleep_time=8
                  fi
                  sleep $sleep_time
                fi
              fi
            done
            
            if [ "$pod_ready" = false ]; then
              echo "❌ Pod $POD_NAME is not ready after multiple checks (attempt $attempt)"
              if [[ "$test_type" == "comprehensive" ]]; then
                kubectl describe pod/$POD_NAME -n ${{ inputs.namespace }} | head -30
              fi
              ((attempt++))
              continue
            fi
            
            # Clean up any existing port forwarding with more thorough cleanup
            cleanup_port_forward() {
              # Kill any existing port forwarding processes
              pkill -f "kubectl port-forward.*${{ inputs.port }}" 2>/dev/null || true
              
              # Determine file prefix based on test type
              local file_prefix="/tmp/pf"
              if [[ "$test_type" == "performance" ]]; then
                file_prefix="/tmp/perf_pf"
              fi
              
              # Clean up PID files and logs
              for file in "${file_prefix}_pid" "${file_prefix}_output.log"; do
                if [ -f "$file" ]; then
                  [ -f "${file_prefix}_pid" ] && kill $(cat "${file_prefix}_pid") 2>/dev/null || true
                  rm -f "$file"
                fi
              done
              
              # Wait for port to be released
              local cleanup_sleep=3
              if [[ "$test_type" == "performance" ]]; then
                cleanup_sleep=2
              fi
              sleep $cleanup_sleep
              
              # Check if port is still in use and force kill if needed
              local port_users=$(lsof -ti:${{ inputs.port }} 2>/dev/null || true)
              if [ -n "$port_users" ]; then
                echo "Force killing processes using port ${{ inputs.port }}: $port_users"
                echo "$port_users" | xargs -r kill -9 2>/dev/null || true
                local force_sleep=2
                if [[ "$test_type" == "performance" ]]; then
                  force_sleep=1
                fi
                sleep $force_sleep
              fi
            }
            
            cleanup_port_forward
            
            # Start port-forward with enhanced error handling
            echo "Starting $test_type port forwarding from pod $POD_NAME..."
            local file_prefix="/tmp/pf"
            if [[ "$test_type" == "performance" ]]; then
              file_prefix="/tmp/perf_pf"
            fi
            
            kubectl port-forward pod/$POD_NAME ${{ inputs.port }}:${{ inputs.port }} -n ${{ inputs.namespace }} > "${file_prefix}_output.log" 2>&1 &
            PF_PID=$!
            echo $PF_PID > "${file_prefix}_pid"
            
            # Wait for port-forward to establish
            echo "Waiting for $test_type port forwarding to establish..."
            local establish_sleep=20
            if [[ "$test_type" == "performance" ]]; then
              establish_sleep=15
            fi
            sleep $establish_sleep
            
            # Check if port-forward process is still running
            if ! kill -0 $PF_PID 2>/dev/null; then
              echo "❌ $test_type port forwarding process died immediately (attempt $attempt)"
              if [ -f "${file_prefix}_output.log" ]; then
                echo "$test_type port forwarding output:"
                cat "${file_prefix}_output.log"
              fi
              ((attempt++))
              continue
            fi
            
            # Enhanced connection testing with progressive delays
            connection_success=false
            local connection_tests=8
            local connection_sleep=3
            if [[ "$test_type" == "performance" ]]; then
              connection_tests=6
              connection_sleep=2
            fi
            
            for i in $(seq 1 $connection_tests); do
              sleep $connection_sleep
              if nc -z 127.0.0.1 ${{ inputs.port }} 2>/dev/null; then
                echo "✓ $test_type port forwarding connection test passed (attempt $i/$connection_tests)"
                connection_success=true
                break
              else
                echo "❌ $test_type port forwarding connection test failed (attempt $i/$connection_tests)"
                # Check if port-forward is still alive
                if ! kill -0 $PF_PID 2>/dev/null; then
                  echo "❌ $test_type port forwarding process died during connection testing"
                  break
                fi
              fi
            done
            
            if [ "$connection_success" = false ]; then
              echo "❌ All $test_type connection tests failed (attempt $attempt)"
              kill $PF_PID 2>/dev/null || true
              ((attempt++))
              continue
            fi
            
            # Extended stability check with more thorough validation
            echo "Running $test_type stability check..."
            stable=true
            local stability_checks=5
            local stability_sleep=8
            if [[ "$test_type" == "performance" ]]; then
              stability_checks=3
              stability_sleep=6
            fi
            
            for check in $(seq 1 $stability_checks); do
              sleep $stability_sleep
              
              # Check if process is still alive
              if ! kill -0 $PF_PID 2>/dev/null; then
                echo "❌ $test_type port forwarding process died during stability check $check/$stability_checks (attempt $attempt)"
                stable=false
                break
              fi
              
              # Check connection stability
              if ! nc -z 127.0.0.1 ${{ inputs.port }} 2>/dev/null; then
                echo "❌ $test_type connection lost during stability check $check/$stability_checks (attempt $attempt)"
                stable=false
                break
              fi
              
              # Additional validation: try to establish a brief connection
              local tcp_timeout=5
              if [[ "$test_type" == "performance" ]]; then
                tcp_timeout=3
              fi
              
              if timeout $tcp_timeout bash -c "</dev/tcp/127.0.0.1/${{ inputs.port }}" 2>/dev/null; then
                echo "✓ $test_type stability check $check/$stability_checks passed (TCP connection verified)"
              else
                echo "❌ $test_type TCP connection verification failed during stability check $check/$stability_checks (attempt $attempt)"
                stable=false
                break
              fi
            done
            
            if [ "$stable" = true ]; then
              echo "✓ $test_type port forwarding established and stable on ${{ inputs.architecture }} (attempt $attempt)"
              if [[ "$test_type" == "comprehensive" ]]; then
                echo "✓ Final validation: Port forwarding is ready for use"
              fi
              return 0
            else
              echo "❌ $test_type stability check failed (attempt $attempt)"
              if [ -f "${file_prefix}_output.log" ]; then
                echo "$test_type port forwarding output:"
                local tail_lines=30
                if [[ "$test_type" == "performance" ]]; then
                  tail_lines=20
                fi
                tail -$tail_lines "${file_prefix}_output.log"
              fi
              kill $PF_PID 2>/dev/null || true
              cleanup_port_forward
              ((attempt++))
            fi
          done
          
          echo "❌ Failed to establish stable $test_type port forwarding after $max_attempts attempts"
          return 1
        }
        
        # Call the function with enhanced error handling
        if ! setup_port_forward; then
          echo "=== Final ${{ inputs.test-type }} diagnostics ==="
          kubectl get pods -n ${{ inputs.namespace }} -o wide
          kubectl describe pods -n ${{ inputs.namespace }}
          kubectl get events -n ${{ inputs.namespace }} --sort-by='.lastTimestamp' | tail -15
          kubectl logs -n ${{ inputs.namespace }} -l cnpg.io/cluster=${{ inputs.cluster-name }} --tail=50
          
          # Check for any system-level issues
          echo "=== ${{ inputs.test-type }} system diagnostics ==="
          lsof -i:${{ inputs.port }} || echo "No processes using port ${{ inputs.port }}"
          if [[ "${{ inputs.test-type }}" == "comprehensive" ]]; then
            netstat -tuln | grep ${{ inputs.port }} || echo "Port ${{ inputs.port }} not in use"
          fi
          
          exit 1
        fi
